import { PrismaClient } from '@prisma/client'
import { useRouter } from 'next/router'
import Head from 'next/head'
import { getSession, useSession } from 'next-auth/react'
import NavBar from '~/components/NavBar'
import Carrousel from '~/components/Carrousel'
import { Accordion, AccordionItem, Button, Avatar } from '@nextui-org/react'
const prisma = new PrismaClient()

const ProductDetail = ({ productData }) => {
  const router = useRouter()
  const url = router.pathname
  const { data: session } = useSession()

  if (router.isFallback) {
    return <div>Loading...</div>
  }

  const baseUrlArray = url.split('/')
  const urlArray = []
  baseUrlArray.forEach((urlCrumb) => {
    if (urlCrumb.startsWith('[')) {
      urlArray.push(router.query[`${urlCrumb.slice(1, -1)}`])
    } else {
      urlArray.push(urlCrumb)
    }
  })
  let root = ''
  let urlPath = ''
  const splitUrl = (urlcrumbs, number) => {
    for (let i = 1; i < urlcrumbs.length; i++) {
      if (i < number) {
        root += '/'
        root += urlcrumbs[i]
      } else {
        urlPath += '/'
        urlPath += urlcrumbs[i]
      }
    }
  }
  splitUrl(urlArray, 1)
  const product = JSON.parse(productData)
  console.log(product)
  const slides = [
    '/product-mock-1.jpeg',
    '/product-mock-2.jpeg',
    '/product-mock-3.jpeg'
  ]
  return (
    <>
      <Head>
        <title>Macrovesta</title>
        <meta name='description' content='Generated by Macrovesta' />
        <link rel='icon' href='/favicon.ico' />
        <script src='/static/datafeeds/udf/dist/bundle.js' async />
        <link rel='alternate' hrefLang='en' href='https://www.macrovesta.ai' />
        <link rel='alternate' hrefLang='pt-br' href='https://pt-br.macrovesta.ai' />
        <link rel='alternate' hrefLang='es' href='https://es.macrovesta.ai' />
        <link rel='alternate' hrefLang='tr' href='https://tr.macrovesta.ai' />
        <link rel='alternate' hrefLang='th' href='https://th.macrovesta.ai' />
      </Head>
      <main className='main h-screen items-center bg-slate-200'>
        <NavBar title='Marketplace' urlPath={urlPath} user={session?.user.name} />
        <div className='md:grid md:grid-cols-2 mx-10 my-8 p-4 gap-8 bg-slate-100 rounded-xl shadow-md'>
          <Carrousel slides={slides} />
          <div className='flex flex-col justify-between'>

            <h1 className='flex italic align-baseline text-3xl mt-8 md:mt-0'>
              {product.product}
            </h1>

            <div className='flex flex-col gap-1 mt-8 md:mt-0'>
              <p className='flex gap-2 items-baseline italic font-medium'>
                Quantity:
                <span className='font-normal not-italic'>
                  {product.quantity} tonnes
                </span>
              </p>

              <p className='flex gap-2 items-baseline italic font-medium'>
                Quality:
                <span className='font-normal not-italic'>
                  {product.quality}
                </span>
              </p>
              <p className='flex gap-2 items-baseline italic font-medium'>
                Shipment:
                <span className='font-normal not-italic'>
                  {product.shipment}
                </span>
              </p>

              <p className='flex gap-2 items-baseline italic font-medium'>
                PaymentTerms:
                <span className='font-normal not-italic'>
                  {product.payment_terms}
                </span>
              </p>

              <p className='flex gap-2 items-baseline italic font-medium'>
                Incoterm:
                <span className='font-normal not-italic'>
                  --
                </span>
              </p>

              <p className='flex gap-2 items-baseline italic font-medium'>
                Price:
                <span className='font-normal not-italic'>
                  {product.price_usd}$ on CTZ23
                </span>
              </p>
            </div>
            <Button className='bg-deep_blue py-6 text-white text-xl mt-8 md:mt-0'>Reserve Product</Button>
          </div>
        </div>

        <div className='flex mx-8'>
          <Accordion>
            <AccordionItem key='1' aria-label='MEET OUR AGENT' title='MEET OUR AGENT' className='bg-slate-100 rounded-xl shadow-md px-4'>

              {product.agents.map((agent, index) => (
                <div key={agent.agent.email} className='flex gap-2 items-center'>
                  <Avatar alt={agent.agent.name} name={agent.agent.name} className='flex-shrink-0' size='sm' src={`/${agent.agent.image}`} />
                  <div className='flex flex-col'>
                    <span className='text-small'>{agent.agent.name}</span>
                    <span className='text-tiny text-default-400'>{agent.agent.email}</span>
                  </div>
                </div>
              ))}
            </AccordionItem>
          </Accordion>
          <Accordion>
            <AccordionItem key='1' aria-label='MEET OUR AGENT' title='FAQ' className='bg-slate-100 rounded-xl shadow-md px-4'>
              Blah Blah
            </AccordionItem>
          </Accordion>
        </div>
      </main>
    </>
  )
}

export const getServerSideProps = async (context) => {
  const { params } = context
  const session = await getSession({ req: context.req })

  if (!session || session?.access_to_marketplace !== true) {
    return {
      redirect: {
        permanent: false,
        destination: '/'
      }
    }
  }

  // Product with agents and exclusive clients
  const product = await prisma.marketplace.findUnique({
    where: { record_id: params.productId },
    include: {
      buyers: {
        select: {
          buyer: {
            select: {
              id: true,
              name: true,
              email: true
            }
          }
        }
      },
      agents: {
        select: {
          agent: {
            select: {
              id: true,
              name: true,
              email: true,
              image: true
            }
          }
        }
      }
    }
  })

  const productData = JSON.stringify(product)
  console.log(JSON.parse(productData))
  return {
    props: { productData }
  }
}

export default ProductDetail
