import { PrismaClient } from '@prisma/client'
import { useRouter } from 'next/router'
import Head from 'next/head'
import { getSession, useSession } from 'next-auth/react'
import NavBar from '~/components/NavBar'
const prisma = new PrismaClient()

const ProductDetail = ({ productData }) => {
  const router = useRouter()
  const url = router.pathname
  const { data: session } = useSession()

  if (router.isFallback) {
    return <div>Loading...</div>
  }

  const baseUrlArray = url.split('/')
  const urlArray = []
  baseUrlArray.forEach((urlCrumb) => {
    if (urlCrumb.startsWith('[')) {
      urlArray.push(router.query[`${urlCrumb.slice(1, -1)}`])
    } else {
      urlArray.push(urlCrumb)
    }
  })
  let root = ''
  let urlPath = ''
  const splitUrl = (urlcrumbs, number) => {
    for (let i = 1; i < urlcrumbs.length; i++) {
      if (i < number) {
        root += '/'
        root += urlcrumbs[i]
      } else {
        urlPath += '/'
        urlPath += urlcrumbs[i]
      }
    }
  }
  splitUrl(urlArray, 1)
  const product = JSON.parse(productData)
  console.log(product)
  return (
    <>
      <Head>
        <title>Macrovesta</title>
        <meta name='description' content='Generated by Macrovesta' />
        <link rel='icon' href='/favicon.ico' />
        <script src='/static/datafeeds/udf/dist/bundle.js' async />
        <link rel='alternate' hrefLang='en' href='https://www.macrovesta.ai' />
        <link rel='alternate' hrefLang='pt-br' href='https://pt-br.macrovesta.ai' />
        <link rel='alternate' hrefLang='es' href='https://es.macrovesta.ai' />
        <link rel='alternate' hrefLang='tr' href='https://tr.macrovesta.ai' />
        <link rel='alternate' hrefLang='th' href='https://th.macrovesta.ai' />
      </Head>
      <main className='main h-screen items-center bg-slate-200'>
        <NavBar title='Marketplace' urlPath={urlPath} user={session?.user.name} />
        <h1>Product: {product.product}</h1>
        <p>Description: {product.description}</p>
        <p>Category: {product.category}</p>
        <p>Quantity: {product.quantity}</p>
        <p>Quality: {product.quality}</p>
        <p>Price: {product.price_usd}</p>
        <p>ImageUrl: {product.image_url}</p>
        <p>Shipment: {product.shipment}</p>
        <p>PaymentTerms: {product.payment_terms}</p>
        <p>AddedBy: {product.added_by}</p>
        <h1 className='font-bold'>Buyers</h1>
        {product.buyers.map((buyer, index) => (
          <p key={index}>{buyer.buyer.name}</p>
        ))}
        <h1 className='font-bold'>Agents</h1>
        {product.agents.map((agent, index) => (
          <p key={index}>{agent.agent.name}</p>
        ))}
      </main>
    </>
  )
}

export const getServerSideProps = async (context) => {
  const { params } = context
  const session = await getSession({ req: context.req })

  if (!session || session?.access_to_marketplace !== true) {
    return {
      redirect: {
        permanent: false,
        destination: '/'
      }
    }
  }

  // Product with agents and exclusive clients
  const product = await prisma.marketplace.findUnique({
    where: { record_id: params.productId },
    include: {
      buyers: {
        select: {
          buyer: {
            select: {
              id: true,
              name: true,
              email: true
            }
          }
        }
      },
      agents: {
        select: {
          agent: {
            select: {
              id: true,
              name: true,
              email: true
            }
          }
        }
      }
    }
  })

  const productData = JSON.stringify(product)
  console.log(JSON.parse(productData))
  return {
    props: { productData }
  }
}

export default ProductDetail
