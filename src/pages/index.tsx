import { type NextPage } from 'next'
import Head from 'next/head'
import { prisma } from '../server/db'
import NavBar from '../components/NavBar'
import TabMenu from '../components/tabmenu'
import { useRouter } from 'next/router'
import { TabMenuArray } from '../components/tabMenuArray'
import React from 'react'
import { useSession, getSession } from 'next-auth/react'
import useWeglotLang from '../components/useWeglotLang'
import MonthlyIndex from '~/components/MonthlyIndex'
import { groupAndStringifyContracts, formatAndStringifyBasisData, splitUrl } from '../utils/calculateUtils'
import { getCurrentMonth, oneWeekAgo } from '../utils/dateUtils'
import SeasonalIndex from '~/components/SeasonalIndex'
import LatestMarketReport from '~/components/LatestMarketReport'
import CTZ23 from '~/components/CTZ23'
import DomesticPrices from '~/components/DomesticPrices'
import WeeklySentimentSurvey from '~/components/WeeklySentimentSurvey'
import RecentEvents from '~/components/RecentEvents'
import BasisCosts from '~/components/BasisCosts'
import USExportSales from '~/components/USExportSales'
import FutureConsiderations from '~/components/FutureConsiderations'
import InCountryNews from '~/components/InCountryNews'
import CottonOnCall from '~/components/CottonOnCall'
import CommitmentOfTraders from '~/components/CommitmentOfTraders'
import SupplyAndDemmand from '~/components/SupplyAndDemmand'
import FutureContractsStudy from '~/components/FutureContractsStudy'
import V4 from '~/components/V4'
import LearnMore from '~/components/LearnMore'

// TODO: Use <Image></Image> from next instead <img> in all web
// TODO: The data that will arrive at the Home page from the server needs to be typed here.Type it when we are sure of the final form in which the data will arrive.

interface IHomeProps {
  monthlyIndexData: unknown;
  seasonalIndexData: unknown;
  snapshotsData: unknown;
  countryNewsData: unknown;
  seasonsData: unknown;
  basisData: unknown;
  initialSentimentData: string;
  contractData: unknown;
  futureContractsStudyData: unknown;
  commentsData: unknown;
  commitmentData: unknown;
  supplyAndDemandData: unknown;
  cottonReportURLData: unknown;
  conclusionData: unknown;
}

const Home: NextPage<IHomeProps> = ({ monthlyIndexData, seasonalIndexData, snapshotsData, countryNewsData, seasonsData, basisData, initialSentimentData, contractData, futureContractsStudyData, commentsData, commitmentData, supplyAndDemandData, cottonReportURLData, conclusionData }) => {
  const router = useRouter()
  const { pathname, query } = router
  const urlPath = splitUrl(pathname, query, 1)

  const currentLang = useWeglotLang()

  const { data: session } = useSession()

  return (
    <>
      <Head>
        <title>Macrovesta</title>
        <meta name="description" content="Generated by Macrovesta" />
        <link rel="icon" href="/favicon.ico" />
        {/* <script src="/static/datafeeds/udf/dist/bundle.js" async /> */}
        <link rel="alternate" hrefLang="en" href="https://www.macrovesta.ai" />
        <link rel="alternate" hrefLang="pt-br" href="https://pt-br.macrovesta.ai" />
        <link rel="alternate" hrefLang="es" href="https://es.macrovesta.ai" />
        <link rel="alternate" hrefLang="tr" href="https://tr.macrovesta.ai" />
        <link rel="alternate" hrefLang="th" href="https://th.macrovesta.ai" />
      </Head>
      <main className="main h-screen items-center bg-slate-200">
        <div className="flex w-full flex-col self-start">

          {/* <WeglotLanguageSwitcher
            domain="macrovesta.ai"
            langs={{ www: 'en', es: 'es', tr: 'tr', th: 'th', 'pt-br': 'pt-br' }} /> */}
          <div className="p-6 bg-slate-200">
            <p className='mx-8 text-justify'>
              Macrovesta is being developed to deliver AI-powered cotton market expertise from farmer to retailer. The insights delivered by your personalised dashboard will provide you with the information and context you need to make confident risk and position management decisions. Our artificial intelligence model uses cutting edge technology to generate insights and explain how and why they are important to your business.
            </p>
            <div className="relative flex flex-col bg-[#ffffff] p-4 rounded-xl m-8 shadow-lg">

              {/* <div>
                <LineGraph data={linedata} />
              </div> */}

              <div className="text-center font-semibold text-xl">The Macrovesta Index</div>
              <div className="flex justify-around gap-8">
                {/* <IndexDial probability={0} /> */}
                <MonthlyIndex monthlyIndexData={monthlyIndexData}></MonthlyIndex>
                <SeasonalIndex seasonalIndexData={seasonalIndexData}></SeasonalIndex>
              </div>
            </div>

            <LatestMarketReport
              currentLang={currentLang}
              conclusionData={conclusionData}
              cottonReportURLData={cottonReportURLData}
            />

            <CTZ23
              session={session}
              contractData={contractData}
              commentsData={commentsData}
            />

            <DomesticPrices
              session={session}
              commentsData={commentsData}
            />

            {/* <div className="flex flex-col bg-[#ffffff] p-4 rounded-xl shadow-lg m-8">
              <TVChartContainer {...defaultWidgetProps} />
            </div> */}

            <WeeklySentimentSurvey
              session={session}
              sentimentData={JSON.parse(initialSentimentData)}
            />

            <RecentEvents
              session={session}
              snapshotsData={snapshotsData}
            />

            <FutureConsiderations
              snapshotsData={snapshotsData}
              session={session}
            />

            <BasisCosts
              session={session}
              basisData={basisData}
              commentsData={commentsData}
            />

            <div className="grid grid-cols-1 xl:grid-cols-2 m-8 gap-8">
              <USExportSales
                commentsData={commentsData}
                session={session}
              />

              <InCountryNews
                session={session}
                countryNewsData={countryNewsData}
              />
            </div>

            <CottonOnCall
              commentsData={commentsData}
              session={session}
            />

            {/* <div className="flex flex-col bg-[#ffffff] items-center p-4 rounded-xl shadow-lg mx-8 mt-4 pb-12">
              <div className="text-xl font-semibold text-center pt-4">Future Contracts Study</div>
              <img src="/Charts_Under_Construction_Wide.png" />
              <LineGraphNotTime data={getCottonOnCallWeekData(JSON.parse(cottonOnCallData).filter((data) => data.season == "0102"))} graphWidth={1000} graphHeight={600} xDomain2={52} xAxisTitle="Week" />
              <LineGraphNotTime data={getCottonOnCallSeasonData(JSON.parse(cottonOnCallData).filter((data) => data.week == "1"))} graphWidth={1000} graphHeight={600} xDomain1={2001} xDomain2={2023} xAxisTitle="Year" yAxisTitle="Sales" />
              <LineGraphNotTime data={getCommitmentOfTradersWeekData(JSON.parse(commitmentData).filter((data) => parseInt(data.calendar_year) == 2010))} graphWidth={1000} graphHeight={600} xDomain2={52} xAxisTitle="Week" />
              <LineGraphNotTime data={getCommitmentOfTradersSeasonData(JSON.parse(commitmentData).filter((data) => parseInt(data.week) == 1))} graphWidth={1000} graphHeight={600} xDomain1={2009} xDomain2={2023} xAxisTitle="Year" yAxisTitle="Sales" />
            </div> */}

            <CommitmentOfTraders
              commitmentData={commitmentData}
              commentsData={commentsData}
              session={session}
            />

            <SupplyAndDemmand
              supplyAndDemandData={supplyAndDemandData}
              commentsData={commentsData}
              session={session}
            />

            <FutureContractsStudy
              futureContractsStudyData={futureContractsStudyData}
            />

            <V4
              seasonsData={seasonsData}
            />

            <LearnMore />
          </div>
        </div>
      </main >
    </>
  )
}
// some random shit added by Vic
export const getServerSideProps = async (context: any) => {
  const session = await getSession({ req: context.req })

  if (!session) {
    return {
      redirect: {
        permanent: false,
        destination: '/introduction'
      }
    }
  }

  // TODO Parallel querys using Promise.all - Better performance
  const [sentiment, basis, contract, season, future, countryNews, snapshot, monthlyIndex, seasonalIndex, comments, commitment, supplydemand, cottonreport, conclusion] = await Promise.all([
    prisma?.sentiment_survey.findMany({ orderBy: { date_of_survey: 'asc' } }),
    prisma?.basis_comparison.findMany({
      orderBy: {
        date_of_basis_report: 'asc'
      }
      // where: {
      //   date_of_basis_report: {
      //     gte: oneWeekAgo.toISOString(), // Filtering records greater than or equal to one week ago
      //     lte: today.toISOString() // Filtering records less than or equal to the current date
      //   }
      // }
    }),
    prisma?.cotton_contracts.findMany({}),
    prisma?.comparison_charts_with_17_months_year.findMany({ orderBy: { date_of_low: 'desc' } }),
    prisma?.future_contracts_study.findMany({ orderBy: { date_of_high: 'desc' } }),
    prisma?.in_country_news.findMany({ where: { verified: true }, orderBy: { date_of_in_country_news: 'desc' } }),
    prisma?.snapshot_strategy.findMany({ where: { verified: true }, orderBy: { date_of_snapshot_strategy: 'desc' } }),
    prisma?.monthly_index.findFirst({ where: { year: new Date().getFullYear(), month: getCurrentMonth() } }),
    prisma?.seasonal_index.findFirst({ /* where: {year: new Date().getFullYear()} */ }),
    prisma?.comments.findMany({ where: { date_of_comment: { gt: oneWeekAgo.toISOString() } }, orderBy: { date_of_comment: 'desc' } }),
    prisma?.commitment_of_traders.findMany({}),
    prisma?.supply_and_demand.findMany({ orderBy: { date: 'asc' } }),
    prisma?.external_Links.findMany({ where: { type: 'Cotton Report' }, orderBy: { date_created: 'desc' } }),
    prisma?.conclusion.findFirst({ orderBy: { date_created: 'desc' } })
  ])

  // Transform data for properly read by components
  const initialSentimentData = JSON.stringify(sentiment)
  const basisData = formatAndStringifyBasisData(basis)
  const contractData = groupAndStringifyContracts(contract)

  const seasonsData = JSON.stringify(season)
  const futureContractsStudyData = JSON.stringify(future)
  const countryNewsData = JSON.stringify(countryNews)
  const snapshotsData = JSON.stringify(snapshot)
  const monthlyIndexData = JSON.stringify(monthlyIndex)
  const seasonalIndexData = JSON.stringify(seasonalIndex)
  const commentsData = JSON.stringify(comments)
  // const onCall = await prisma?.cotton_on_call.findMany({})
  // const cottonOnCallData = JSON.stringify(onCall)
  // const cottonOnCallData = JSON.stringify({ variable: 'hello world' })
  const commitmentData = JSON.stringify(commitment)
  // const exportdata = await prisma?.us_export_sales.findMany({})
  // const exportSalesData = JSON.stringify(exportdata)
  // const exportSalesData = JSON.stringify({ variable: 'hello world' })
  const supplyAndDemandData = JSON.stringify(supplydemand)
  const cottonReportURLData = JSON.stringify(cottonreport)
  const conclusionData = JSON.stringify(conclusion)
  // const aIndex = await prisma?.a_index.findMany({})
  // const aIndexData = JSON.stringify(aIndex)
  // const aIndexData = JSON.stringify({ variable: 'hello world' })
  // console.log(monthlyIndexData)

  return {
    props: { monthlyIndexData, seasonalIndexData, snapshotsData, countryNewsData, seasonsData, basisData, initialSentimentData, contractData, futureContractsStudyData, commentsData, commitmentData, supplyAndDemandData, cottonReportURLData, conclusionData }
  }
}

export default Home
