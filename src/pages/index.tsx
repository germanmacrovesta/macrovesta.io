import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { prisma } from '../server/db';
import Sidebar from '../components/sidebar';
import Breadcrumbs from '../components/breadcrumbs';
import TabMenu from '../components/tabmenu';
import { useRouter } from "next/router";
import { TabMenuArray } from '../components/tabMenuArray';
import React from "react";
import SingleSelectDropdown from '../components/singleSelectDropdown';
import { TVChartContainer } from "../components/TVChartContainer";
import {
  ChartingLibraryWidgetOptions,
  ResolutionString,
} from "../../public/static/charting_library/charting_library";
import GroupedBarChart from '../components/groupedBarChart'

const defaultWidgetProps: Partial<ChartingLibraryWidgetOptions> = {
  symbol: "AAPL",
  interval: "1D" as ResolutionString,
  library_path: "/static/charting_library/",
  locale: "en",
  charts_storage_url: "https://saveload.tradingview.com",
  charts_storage_api_version: "1.1",
  client_id: "tradingview.com",
  user_id: "public_user_id",
  fullscreen: false,
  autosize: true,
};

const selectAppropriateImage = (inv, value) => {
  let imagesrc = "";
  if (inv == "Y") {
    if (value < 15) {

      imagesrc = "/Index_Neutral.jpg"

    } else if (value < 50) {
      imagesrc = "/Index_Inverse_Likely.jpg"
    } else {
      imagesrc = "/Index_Inverse_High.jpg"
    }
  } else {
    if (value < 15) {

      imagesrc = "/Index_Neutral.jpg"

    } else if (value < 50) {
      imagesrc = "/Index_Non_Likely.jpg"
    } else {
      imagesrc = "/Index_Non_High.jpg"
    }
  }
  return (
    <img className="w-[400px]" src={imagesrc} />
  )
}

const parseDateString = (dateString) => {
  const date = new Date(dateString);
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = String(date.getFullYear()).slice(-2);

  if (isNaN(date)) {
    return undefined
  } else {
    return `${day}-${month}-${year}`;
  }

};

const Home: NextPage = ({ monthlyIndexData, snapshotsData, countryNewsData, seasonsData }) => {
  const router = useRouter();
  const url = router.pathname;

  const baseUrlArray = url.split('/');
  let urlArray: any = [];
  baseUrlArray.forEach((urlCrumb) => {
    if (urlCrumb.startsWith('[')) {
      urlArray.push(router.query[`${urlCrumb.slice(1, -1)}`])
    } else {
      urlArray.push(urlCrumb)
    }
  })
  let root = '';
  let urlPath = '';
  const splitUrl = (urlcrumbs: any, number: any) => {
    for (let i = 1; i < urlcrumbs.length; i++) {
      if (i < number) {
        root += '/';
        root += urlcrumbs[i];
      } else {
        urlPath += '/';
        urlPath += urlcrumbs[i];
      }
    }
  }
  splitUrl(urlArray, 1)

  const [degrees, setDegrees] = React.useState(90)
  const [season1, setSeason1] = React.useState('')
  const [season2, setSeason2] = React.useState('')
  const [season3, setSeason3] = React.useState('')

  const [countryNewsPopup, setCountryNewsPopup] = React.useState(null)
  const [snapshotPopup, setSnapshotPopup] = React.useState(null)

  React.useEffect(() => {
    setSeason1(JSON.parse(seasonsData)[2]?.season ?? '')
    setSeason2(JSON.parse(seasonsData)[1]?.season ?? '')
    setSeason3(JSON.parse(seasonsData)[0]?.season ?? '')
  }, [seasonsData])

  React.useEffect(() => {
    setDegrees(90 - (parseFloat(JSON.parse(monthlyIndexData).probability_rate) / 100 * 90) * (JSON.parse(monthlyIndexData).inverse_month == "Y" ? 1 : -1))
  }, [monthlyIndexData])

  const data = [
    { name: 'Group1', propertyOne: 10, propertyTwo: 20 },
    { name: 'Group2', propertyOne: 30, propertyTwo: 40 },
    // ...
  ];

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
        <script src="/static/datafeeds/udf/dist/bundle.js" async />
      </Head>
      <main className="grid grid-cols-[160px_auto] h-screen items-center">
        <Sidebar />
        <div className="w-40"></div>
        <div className="flex w-full flex-col self-start">
          <header className="z-50 w-full grid grid-cols-[auto_1fr] grid-rows-1 bg-white shadow-center-md">
            <Breadcrumbs title={"Macrovesta Demo"} urlPath={urlPath} />
            <TabMenu data={TabMenuArray} urlPath={urlPath} />
          </header>
          <div className="p-6 bg-slate-200">
            Macrovesta is being developed to deliver AI-powered cotton market expertise from farmer to retailer. The insights delivered by your personalised dashboard will provide you with the information and context you need to make confident risk and position management decisions. Our artificial intelligence model uses cutting edge technology to generate insights and explain how and why they are important to your business.
            <div className="flex flex-col bg-[#ffffff] p-4 rounded-xl m-8 shadow-lg">
              <GroupedBarChart data={data} />
              <div className="text-center">
                The Macrovesta Index
              </div>
              <div className="flex justify-around gap-8">
                <div className="relative">
                  <div className="text-center">
                    Monthly Index
                  </div>
                  {selectAppropriateImage(JSON.parse(monthlyIndexData).inverse_month, parseFloat(JSON.parse(monthlyIndexData).probability_rate))}
                  {/* <img className="w-[400px]" src="/Index_Inverse_High.jpg" /> */}
                  <div className="absolute origin-right bg-turquoise w-[130px] ml-[68px] bottom-[45px] h-2 transition-all duration-1000" style={{
                    transform: `rotate(${90 - (parseFloat(JSON.parse(monthlyIndexData).probability_rate) / 100 * 90) * (JSON.parse(monthlyIndexData).inverse_month == "Y" ? 1 : -1)}deg)`
                  }}>
                    {/* <div className="origin-right bg-turquoise w-[150px] ml-[50px] bottom-[28px] h-2" style={{ transform: `rotate(${degrees}deg)` }}>
                    </div> */}
                  </div>
                  <div className="absolute bg-white shadow-center-lg text-black rounded-full right-0 w-12 h-12 grid place-content-center -translate-x-[178px] -translate-y-[25px] bottom-0">{JSON.parse(monthlyIndexData).probability_rate}</div>
                </div>
                <div>
                  <div className="text-center">
                    Seasonal Index
                  </div>
                  <img className="w-[400px]" src="/Draft_Index_indicator.svg" />
                </div>
              </div>
            </div>
            <div className="flex flex-col">
              <div className="flex flex-col bg-[#ffffff] shadow-center-lg text-black rounded-xl px-4 py-2 mb-8 mx-8">
                <img className="w-fit" src="/example-chart.png" />
              </div>
              <div className="text-center text-2xl">Please Select the Seasons you want to compare</div>
              <div className="grid grid-cols-3 justify-center gap-8 mx-8 mt-4 text-xl">
                <div className="flex flex-col">
                  <SingleSelectDropdown
                    options={JSON.parse(seasonsData)}
                    label="Season"
                    variable="season"
                    onSelectionChange={(e) => setSeason1(e.season)}
                    placeholder="Select Season"
                    searchPlaceholder="Search Seasons"
                    includeLabel={false}
                    defaultValue={season1}
                  />
                  {/* <div className="text-center mt-4 mb-2 font-semibold">Season 1</div> */}
                  <div className="flex flex-col gap-1 bg-[#ffffff] shadow-center-lg text-black rounded-xl px-8 py-4 mt-8">
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season1)?.low_price}</div>
                    <div>High Price: {JSON.parse(seasonsData).find((season) => season.season == season1)?.high_price}</div>
                    <div>Date of Low: {parseDateString(JSON.parse(seasonsData).find((season) => season.season == season1)?.date_of_low)}</div>
                    <div>Date of High: {parseDateString(JSON.parse(seasonsData).find((season) => season.season == season1)?.date_of_high)}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season1)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season1)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season1)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season1)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season1)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season1)?.low_price}</div>
                  </div>
                </div>
                <div className="flex flex-col">
                  <SingleSelectDropdown
                    options={JSON.parse(seasonsData)}
                    label="Season"
                    variable="season"
                    colour="bg-deep_blue"
                    onSelectionChange={(e) => setSeason2(e.season)}
                    placeholder="Select Season"
                    searchPlaceholder="Search Seasons"
                    includeLabel={false}
                    defaultValue={season2}
                  />
                  {/* <div className="text-center mt-4 mb-2 font-semibold">Season 2</div> */}
                  <div className="flex flex-col gap-1 bg-[#ffffff] shadow-center-lg text-black rounded-xl px-8 py-4 mt-8">
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season2)?.low_price}</div>
                    <div>High Price: {JSON.parse(seasonsData).find((season) => season.season == season2)?.high_price}</div>
                    <div>Date of Low: {parseDateString(JSON.parse(seasonsData).find((season) => season.season == season2)?.date_of_low)}</div>
                    <div>Date of High: {parseDateString(JSON.parse(seasonsData).find((season) => season.season == season2)?.date_of_high)}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season2)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season2)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season2)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season2)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season2)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season2)?.low_price}</div>
                  </div>
                </div>
                <div className="flex flex-col">
                  <SingleSelectDropdown
                    options={JSON.parse(seasonsData)}
                    label="Season"
                    variable="season"
                    colour="bg-turquoise"
                    onSelectionChange={(e) => setSeason3(e.season)}
                    placeholder="Select Season"
                    searchPlaceholder="Search Seasons"
                    includeLabel={false}
                    defaultValue={season3}
                  />
                  {/* <div className="text-center mt-4 mb-2 font-semibold">Season 3</div> */}
                  <div className="flex flex-col gap-1 bg-[#ffffff] shadow-center-lg text-black rounded-xl px-8 py-4 mt-8">
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season3)?.low_price}</div>
                    <div>High Price: {JSON.parse(seasonsData).find((season) => season.season == season3)?.high_price}</div>
                    <div>Date of Low: {parseDateString(JSON.parse(seasonsData).find((season) => season.season == season3)?.date_of_low)}</div>
                    <div>Date of High: {parseDateString(JSON.parse(seasonsData).find((season) => season.season == season3)?.date_of_high)}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season3)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season3)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season3)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season3)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season3)?.low_price}</div>
                    <div>Low Price: {JSON.parse(seasonsData).find((season) => season.season == season3)?.low_price}</div>
                  </div>
                </div>
              </div>
            </div>
            <div className="flex flex-col bg-[#ffffff] p-4 rounded-xl shadow-lg m-8">
              <TVChartContainer {...defaultWidgetProps} />
            </div>
            <div className="flex flex-col bg-[#ffffff] p-4 rounded-xl shadow-lg m-8">
              <div className="text-center">
                30 Seconds Snapshot
              </div>
              <div className="grid grid-cols-2 justify-around items-start gap-x-8 gap-y-4 mt-4">
                {/* {JSON.parse(snapshotsData).map((snapshot) => (
                  <div>
                    {snapshot.title_of_snapshot_strategy}
                  </div>
                ))} */}
                {JSON.parse(snapshotsData).filter((object: any, index: number) => index < 10).map((snapshot) => (
                  <div className="border hover:bg-deep_blue hover:text-white transition-colors duration-300 shadow-lg rounded-lg w-full py-2 px-4 cursor-pointer" onClick={() => setSnapshotPopup(snapshot)}>
                    {snapshot.title_of_snapshot_strategy}
                  </div>
                ))}
                {snapshotPopup != null && (
                  <div className='absolute modal left-0 top-0 z-40'>
                    <div className=' fixed grid place-content-center inset-0 z-40'>
                      <div className='flex flex-col items-center w-[750px] max-h-[600px] overflow-y-auto inset-0 z-50 bg-white rounded-xl shadow-lg px-8 py-4'>
                        <img className="w-3/4" src={snapshotPopup.image_of_snapshot_strategy} />
                        <div className="my-4 font-semibold text-lg">
                          {snapshotPopup.title_of_snapshot_strategy}
                        </div>
                        <div className="">
                          {snapshotPopup.text_of_snapshot_strategy}
                        </div>
                      </div>
                      <div onClick={() => setSnapshotPopup(null)} className='fixed inset-0 backdrop-blur-sm backdrop-brightness-75 z-10'></div>
                    </div>
                  </div>
                )}
              </div>
            </div>
            <div className="grid grid-cols-1 xl:grid-cols-2 m-8 gap-8">
              <div className="flex flex-col bg-[#ffffff] p-4 rounded-xl shadow-lg">
                <img src="/example-bar-chart.png" />
              </div>
              <div className="flex flex-col bg-[#ffffff] p-4 rounded-xl shadow-lg">
                <div className="text-center">
                  In Country News
                </div>
                <div className="flex flex-col justify-around items-start gap-4 mt-4">
                  {JSON.parse(countryNewsData).filter((object: any, index: number) => index < 6).map((news) => (
                    <div className="border hover:bg-deep_blue hover:text-white transition-colors duration-300 shadow-lg rounded-lg w-full py-2 px-4 cursor-pointer" onClick={() => setCountryNewsPopup(news)}>
                      {news.title_of_in_country_news}
                    </div>
                  ))}
                  {countryNewsPopup != null && (
                    <div className='absolute modal left-0 top-0 z-40'>
                      <div className=' fixed grid place-content-center inset-0 z-40'>
                        <div className='flex flex-col items-center w-[750px] max-h-[600px] overflow-y-auto inset-0 z-50 bg-white rounded-xl shadow-lg px-8 py-4'>
                          <img className="w-3/4" src={countryNewsPopup.image_of_in_country_news} />
                          <div className="my-4 font-semibold text-lg">
                            {countryNewsPopup.title_of_in_country_news}
                          </div>
                          <div className="">
                            {countryNewsPopup.text_of_in_country_news}
                          </div>
                        </div>
                        <div onClick={() => setCountryNewsPopup(null)} className='fixed inset-0 backdrop-blur-sm backdrop-brightness-75 z-10'></div>
                      </div>
                    </div>
                  )}

                </div>
              </div>
            </div>
            <div className="text-xl text-center">Learn More with Macrovesta</div>
            <div className="grid grid-cols-1 xl:grid-cols-2 m-8 gap-24 text-lg">
              <div className="flex flex-col bg-[#ffffff] p-4 rounded-xl shadow-lg text-center">Button 1</div>
              <div className="flex flex-col bg-[#ffffff] p-4 rounded-xl shadow-lg text-center">Button 2</div>
            </div>
          </div>
        </div>
      </main >
    </>
  );
};
//some random shit
export const getServerSideProps = async (context: any) => {
  const season = await prisma?.comparison_charts_with_17_months_year.findMany({
    orderBy: {
      date_of_low: 'desc'
    }
  })
  const seasonsData = JSON.stringify(season);

  const countryNews = await prisma?.in_country_news.findMany({

  })
  const countryNewsData = JSON.stringify(countryNews)

  const snapshot = await prisma?.snapshot_strategy.findMany({

  })
  const snapshotsData = JSON.stringify(snapshot);

  const monthlyindex = await prisma?.monthly_index.findFirst({
    // where: {
    //   inverse_month: "N"
    // }
  });
  const monthlyIndexData = JSON.stringify(monthlyindex);
  console.log(monthlyIndexData)
  return {
    props: { monthlyIndexData, snapshotsData, countryNewsData, seasonsData },
  };
};

export default Home;
