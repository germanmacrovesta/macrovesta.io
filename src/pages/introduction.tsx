// import React from 'react';
// import { type NextPage } from "next";
// import Head from "next/head";
// import Link from "next/link";
// import Header from "../components/header"

// const About: NextPage = () => {
//     return (
//         <>
//             <Head>
//                 <title>Macrovesta</title>
//                 <meta name="description" content="Generated by Macrovesta" />
//                 <link rel="icon" href="/favicon.ico" />
//                 {/* <script src="/static/datafeeds/udf/dist/bundle.js" async /> */}
//                 <link rel="alternate" hrefLang="en" href="https://www.macrovesta.ai" />
//                 <link rel="alternate" hrefLang="pt-br" href="https://pt-br.macrovesta.ai" />
//                 <link rel="alternate" hrefLang="es" href="https://es.macrovesta.ai" />
//                 <link rel="alternate" hrefLang="tr" href="https://tr.macrovesta.ai" />
//                 <link rel="alternate" hrefLang="th" href="https://th.macrovesta.ai" />
//                 {/* <script type="text/javascript" src="https://cdn.weglot.com/weglot.min.js"></script>
//         <script>
//           {Weglot.initialize({
//             api_key: 'wg_60b49229f516dee77edb3109e6a46c379'
//           })}
//         </script> */}
//             </Head>
//             <main>
//                 <Header />
//             </main>
//         </>
//     )
// }

// export default About

import Hero from '../components/hero'
import Features from '../components/features'
import FeaturesBlocks from '../components/features-blocks'
import Testimonials from '../components/testimonials'
import Newsletter from '../components/newsletter'
import Header from '../components/header'
import Footer from '../components/footer'
import CookieConsent from '../components/cookieConsent'
import Head from 'next/head'
import { GetServerSideProps } from 'next'
import { getSession } from 'next-auth/react'
// import DemoModal from '../components/demoModal'
import React from 'react'
import { useRouter } from 'next/router'
import DemoForm from '../components/demoForm'

export default function Introduction () {
  const router = useRouter()

  const [showModal, setShowModal] = React.useState(false)
  const modalContentRef = React.useRef(null)

  const openModal = () => {
    setShowModal(true)
  }

  const closeModal = () => {
    setShowModal(false)
  }

  const handleFormSubmit = (formData) => {
    // Handle the form submission here
    console.log(formData)
    closeModal() // Close the modal after form submission
  }

  const [isModalOpen, setIsModalOpen] = React.useState(router.query.demo == 'true')

  return (
        <>
            <Head>
                <title>Macrovesta</title>
                <meta name="description" content="Generated by Macrovesta" />
                <link rel="icon" href="/favicon.ico" />
                {/* <script src="/static/datafeeds/udf/dist/bundle.js" async /> */}
                <link rel="alternate" hrefLang="en" href="https://www.macrovesta.ai" />
                <link rel="alternate" hrefLang="pt-br" href="https://pt-br.macrovesta.ai" />
                <link rel="alternate" hrefLang="es" href="https://es.macrovesta.ai" />
                <link rel="alternate" hrefLang="tr" href="https://tr.macrovesta.ai" />
                <link rel="alternate" hrefLang="th" href="https://th.macrovesta.ai" />
            </Head>
            <Header bannerGradient='bg-gradient-to-r from-deep_blue to-navy' />
            <Hero setIsModalOpen={setIsModalOpen} />
            {isModalOpen && (
                <div className="fixed inset-0 grid place-content-center bg-gradient-to-r from-[#051D6D50] to-[#051D3850] z-50" onClick={() => setIsModalOpen(false)}>
                    <div className="modal w-full px-4 md:w-[780px] md:mx-auto flex flex-col">
                        {/* <div className=" absolute inset-0" /> */}

                        <div
                            ref={modalContentRef}
                            className="modal-content flex flex-col overflow-y-auto bg-white h-fit rounded shadow-lg z-50 p-8 my-4 relative" // Added relative position
                            onClick={(e) => { e.stopPropagation() }}
                        >
                            {/* Close button */}
                            <button
                                className="absolute top-0 right-0 p-3 text-black cursor-pointer"
                                onClick={(e) => { e.stopPropagation(); setIsModalOpen(false) }}
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    className="h-6 w-6"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="black"
                                >
                                    <path
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        strokeWidth={2}
                                        d="M6 18L18 6M6 6l12 12"
                                    />
                                </svg>
                            </button>

                            {/* Render the provided title */}
                            <div className="pb-8">
                                <h2 className="text-lg sm:text-2xl text-center  mb-8">Book your Macrovesta demo</h2>
                                <div className="flex flex-col-reverse sm:flex-row justify-center">
                                    <text className="text-[10px] sm:text-xs px-4">
                                        This usually takes around 30 minutes and will be done via Google Meet. A member
                                        of our team will contact you to confirm the date or suggest an alternative for you
                                        as soon as possible.
                                    </text>
                                    <div>
                                        {/* <img src="/Full_Logo.svg" alt="Tracker" className="mx-auto w-[150px] invert -hue-rotate-90 sm:w-[500px]" /> */}
                                        <img src={'/Logo File-13.png'} className="mx-auto w-[150px] sm:w-[500px] object-fill" />

                                    </div>
                                </div>
                            </div>

                            {/* Render the form from DemoForm component */}
                            <DemoForm onSubmit={handleFormSubmit} />
                        </div>
                    </div>
                </div>
            )}
            <FeaturesBlocks />
            {/* <Features /> */}
            <Testimonials />
            {/* <Newsletter /> */}
            <CookieConsent />
            <Footer />
        </>
  )
}

export const getServerSideProps = async (context: any) => {
  const session = await getSession({ req: context.req })

  if (session && session?.company_id != null) {
    return {
      redirect: {
        permanent: false,
        destination: '/'
      }
    }
  }

  return {
    props: {}
  }
}
