import { type NextPage } from 'next'
import Head from 'next/head'
import { prisma } from '../server/db'
import { useSession, getSession } from 'next-auth/react'
import DashboardFooter from '~/components/DashboardFooter'
import { today } from '~/utils/dateUtils'
import ExclusiveForYou from '~/components/MarketPlace/ExclusiveForYou'
import FeaturedProducts from '~/components/MarketPlace/FeaturedProducts'

const Home: NextPage = ({ allProductsData }) => {
  return (
    <>
      <Head>
        <title>Macrovesta</title>
        <meta name="description" content="Generated by Macrovesta" />
        <link rel="icon" href="/favicon.ico" />
        <script src="/static/datafeeds/udf/dist/bundle.js" async />
        <link rel="alternate" hrefLang="en" href="https://www.macrovesta.ai" />
        <link rel="alternate" hrefLang="pt-br" href="https://pt-br.macrovesta.ai" />
        <link rel="alternate" hrefLang="es" href="https://es.macrovesta.ai" />
        <link rel="alternate" hrefLang="tr" href="https://tr.macrovesta.ai" />
        <link rel="alternate" hrefLang="th" href="https://th.macrovesta.ai" />
      </Head>
      <main className="main h-full items-center bg-slate-200 ">
        <ExclusiveForYou allProductsData={allProductsData}></ExclusiveForYou>
        <FeaturedProducts allProductsData={allProductsData}></FeaturedProducts>
        <DashboardFooter />
      </main >
    </>
  )
}

export const getServerSideProps = async (context: any) => {
  const session = await getSession({ req: context.req })

  if (!session || session?.access_to_marketplace !== true) {
    return {
      redirect: {
        permanent: false,
        destination: '/'
      }
    }
  }

  // Featured Products
  const allProducts = await prisma?.marketplace.findMany({
    where: {
      reserved_by: null,
      expiry_date: {
        gt: today
      }
    }
  })

  /*
  Illegal mix of collations (utf8mb4_unicode_ci,IMPLICIT) and (utf8mb4_general_ci,IMPLICIT) for operation '='
  */

  // Exclusive for you
  const productsAssignedToUser = await prisma.marketplaceBuyer.findMany({
    where: {
      buyer_id: session?.user?.id
    },
    include: {
      marketplace: true
    }
  })

  console.log(productsAssignedToUser)

  const allProductsData = JSON.stringify(allProducts)

  return {
    props: { allProductsData }
  }
}

export default Home
